name: build

on:
  # Run on pushes to tags, the "master" branch, PR's and workflow_dispatch events
  push:
    tags-ignore:
    branches:
      - test
    paths-ignore:
      - '**.md'
      - '*.txt'
      - '.gitignore'
      - 'docs/*'
  pull_request:
    paths-ignore:
      - '**.md'
      - '*.txt'
      - '.gitignore'
      - 'docs/*'
  workflow_dispatch:

jobs:
  vs2022:
    name: ${{ matrix.build_type }} Windows ${{ matrix.arch }}
    runs-on: windows-2022
    strategy:
      matrix:
        build_type: [Release]
        arch: [x86, x64]
        include:
          - arch: x86
            platform: Win32
            pkg_suffix: x86
          - arch: x64
            platform: x64
            suffix: .x64
            pkg_suffix: x64

    steps:
      - uses: actions/checkout@v3

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.1

      - name: Create Build Environment
        run: cmake -E make_directory ${{runner.workspace}}/build

      - name: Configure CMake
        shell: bash
        working-directory: ${{runner.workspace}}/build
        run: cmake $GITHUB_WORKSPACE -A ${{ matrix.platform }} -DCMAKE_INSTALL_PREFIX=bin

      - name: Build
        working-directory: ${{runner.workspace}}/build
        shell: bash
        run: cmake --build . --config ${{ matrix.build_type }}

      - name: Install
        working-directory: ${{runner.workspace}}/build
        shell: bash
        run: cmake --install . --config ${{ matrix.build_type }}

      - uses: actions/upload-artifact@v3
        with:
          name: windows-${{ matrix.arch }}
          path: ${{runner.workspace}}/build/bin
          if-no-files-found: error

  ubuntu:
    name: ${{ matrix.config }} Ubuntu ${{ matrix.arch }}
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        arch: [x86, x86_64]
        cc: [gcc]
        cxx: [g++]
        config: [Release]
        include:
          - config: Release
            rule: install
          - arch: x86
            use_sdl: true
          - arch: x86_64
            use_sdl: true

    steps:
      - uses: actions/checkout@v3

      - name: Create Build Environment
        run: |
          if [ ${{ matrix.arch }} == "x86" ]; then
            sudo dpkg --add-architecture i386
            sudo apt-get -qq update
            sudo apt-get -y install aptitude
            sudo apt-get -y install gcc-multilib g++-multilib ninja-build
            sudo apt-get -y install --allow-downgrades libpcre2-8-0:i386 libjpeg-dev:i386 libpng-dev:i386 libcurl4-openssl-dev:i386
            sudo aptitude -y install libglib2.0-dev:i386 libsdl2-dev:i386
          else
            sudo apt-get -qq update
            sudo apt-get install libjpeg-dev libpng-dev zlib1g-dev libsdl2-dev
          fi
          cmake -E make_directory ${{runner.workspace}}/build

      - name: Configure CMake
        shell: bash
        working-directory: ${{runner.workspace}}/build
        run: |
          if [ ${{ matrix.arch }} == "x86" ]; then
          cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DBuildDiscordRichPresence=OFF -DCMAKE_INSTALL_PREFIX=${{runner.workspace}}/install -DCMAKE_TOOLCHAIN_FILE=CMakeModules/Toolchains/linux-i686.cmake
          else
          cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DBuildDiscordRichPresence=OFF -DCMAKE_INSTALL_PREFIX=${{runner.workspace}}/install
          fi

      - name: Build
        working-directory: ${{runner.workspace}}/build
        shell: bash
        run: cmake --build .

      - name: Install
        working-directory: ${{runner.workspace}}/build
        shell: bash
        run: cmake --install .

      - name: Create binary archive
        working-directory: ${{runner.workspace}}/install/JediAcademy
        shell: bash
        run: |
          if [ ${{ matrix.arch }} == "x86" ]; then
          chmod +x eternaljk.i386
          else
          chmod +x eternaljk.${{ matrix.arch }}  
          fi
          tar -cvf EternalJK-linux-${{ matrix.arch }}.tar      *

      - uses: actions/upload-artifact@v3
        if: matrix.cc == 'gcc' && matrix.config == 'Release'
        with:
          name: linux-${{ matrix.arch }}
          path: ${{runner.workspace}}/install/JediAcademy/EternalJK-linux-${{ matrix.arch }}.tar
          if-no-files-found: error

  macos:
    name: ${{ matrix.config }} macOS ${{ matrix.arch }}
    runs-on: macos-12
    strategy:
      fail-fast: false
      matrix:
        arch: [x86_64]
        cc: [clang]
        cxx: [clang++]
        config: [Release]
        include:
          - config: Release
            rule: install

    steps:
      - uses: actions/checkout@v3

      - name: Create Build Environment
        run: |
          brew install zlib libjpeg libpng sdl2
          cmake -E make_directory ${{runner.workspace}}/build
      - name: Configure CMake
        shell: bash
        working-directory: ${{runner.workspace}}/build
        run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=Release -DBuildDiscordRichPresence=OFF -DCMAKE_INSTALL_PREFIX=${{runner.workspace}}/install

      - name: Build
        working-directory: ${{runner.workspace}}/build
        shell: bash
        run: cmake --build .

      - name: Install
        working-directory: ${{runner.workspace}}/build
        shell: bash
        run: cmake --install .

      - name: Create binary archive
        working-directory: ${{runner.workspace}}/install/JediAcademy
        shell: bash
        run: |
          chmod +x eternaljk.x86_64.app/Contents/MacOS/eternaljk.x86_64
          tar -cvf EternalJK-macos-${{ matrix.arch }}.tar      *
      - uses: actions/upload-artifact@v3
        if: matrix.cc == 'clang' && matrix.config == 'Release'
        with:
          name: macos-${{ matrix.arch }}
          path: ${{runner.workspace}}/install/JediAcademy/EternalJK-macos-${{ matrix.arch }}.tar
          if-no-files-found: error

  create-testing:
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    needs: [vs2022, ubuntu, macos]
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Download Artifacts
        uses: actions/download-artifact@v3

      - name: Create binary archives
        run: |
          7z a -r EternalJK-linux-x86.zip         ./linux-x86/*
          7z a -r EternalJK-linux-x86_64.zip      ./linux-x86_64/*
          7z a -r EternalJK-windows-x86.zip       ./windows-x86/JediAcademy/* '-x!msvcp*.*' '-x!vcruntime*.*' '-x!concrt*.*'
          7z a -r EternalJK-windows-x84_64.zip    ./windows-x64/JediAcademy/* '-x!msvcp*.*' '-x!vcruntime*.*' '-x!concrt*.*'
          7z a -r EternalJK-macos-x86_64.zip      ./macos-x86_64/*

      - name: Create latest build
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          automatic_release_tag: "latest"
          prerelease: false
          title: Latest Build
          files: |
            *.zip