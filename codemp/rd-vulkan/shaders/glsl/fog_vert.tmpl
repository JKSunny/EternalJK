#version 450

#if defined(USE_VBO_GHOUL2) || defined(USE_VBO_MDV)
	#define USE_VBO_MODEL
#endif

// 64 bytes
layout(push_constant) uniform Transform {
	mat4 mvp;
};

layout(set = 0, binding = 0) uniform UBO {
	// light/env/material parameters:
	vec4 eyePos;
	vec4 lightPos;
	vec4 lightColor;
	vec4 lightVector;
//#ifdef USE_FOG	
	// fog parameters:
	vec4 fogDistanceVector;
	vec4 fogDepthVector;
	vec4 fogEyeT;
	vec4 fogColor;
//#endif
#if !defined(USE_VBO_MODEL)
	mat4 u_ModelMatrix;
#endif
};

#if defined(USE_VBO_MODEL)


	struct vkUniformBones_t {
		mat3x4 BoneMatrices[72];
	};

	struct vkUniformEntity_t {
		vec4 ambientLight;
		vec4 directedLight;
		vec4 LocalLightOrigin;
		vec4 localViewOrigin;
		mat4 ModelMatrix;
	};
#ifdef USE_VBO_MODEL
	layout(location = 10) in vec4 i_mvp_a;
	layout(location = 11) in vec4 i_mvp_b;
	layout(location = 12) in vec4 i_mvp_c;
	layout(location = 13) in vec4 i_mvp_d;
	layout(location = 14) in uvec4 i_extra;

	layout(std430, set = 0, binding = 2) readonly buffer EntityBuffer {
		vkUniformEntity_t entities[];
	};

	layout(std430, set = 0, binding = 3) readonly buffer BonesBuffer {
		vkUniformBones_t bones[];
	};

	#define u_ModelMatrix		entity_data.ModelMatrix

	vkUniformEntity_t entity_data = entities[i_extra.x];
	//vkUniformGlobal_t global_data = global[i_extra.y];

	#define GET_BONE_BY_INDEX bones[i_extra.z].BoneMatrices[index];
#else
	layout(set = 0, binding = 2) uniform Entity {
		vkUniformEntity_t entity_data;
	};

	layout(set = 0, binding = 3) uniform Bones {
		vkUniformBones_t bones;
	};

	#define GET_BONE_BY_INDEX bones.BoneMatrices[index]
#endif
#endif

#ifdef USE_VBO_GHOUL2	
	layout(location = 8) in uvec4 in_bones;
	layout(location = 9) in vec4 in_weights;

	mat4x3 GetBoneMatrix(uint index)
	{
		mat3x4 bone = GET_BONE_BY_INDEX;
		return mat4x3(
			bone[0].x, bone[1].x, bone[2].x,
			bone[0].y, bone[1].y, bone[2].y,
			bone[0].z, bone[1].z, bone[2].z,
			bone[0].w, bone[1].w, bone[2].w);
	}
#endif

layout(location = 0) in vec3 in_position;

#ifdef USE_FOG_LINEAR
	layout(location = 4) out vec2 fog_tex_coord;
#endif
#ifdef USE_FOG_EXP
	layout(location = 4) out vec3 ws_position;
#endif

out gl_PerVertex {
	vec4 gl_Position;
};

void main() {
	#ifdef USE_VBO_MODEL
		#ifdef USE_VBO_GHOUL2
			mat4x3 skin_matrix =
				GetBoneMatrix(in_bones.x) * in_weights.x +
				GetBoneMatrix(in_bones.y) * in_weights.y +
				GetBoneMatrix(in_bones.z) * in_weights.z +
				GetBoneMatrix(in_bones.w) * in_weights.w;

			vec3 position = skin_matrix * vec4(in_position, 1.0);
		#else
			vec3 position = in_position;
		#endif
	#else
		vec3 position = in_position;
	#endif

#if defined(USE_VBO_MODEL)
	gl_Position = mat4( i_mvp_a, i_mvp_b, i_mvp_c, i_mvp_d ) * vec4(position, 1.0);
#else
	gl_Position = mvp * vec4(position, 1.0);
#endif

	#ifdef USE_FOG_LINEAR
		float s = dot(in_position, fogDistanceVector.xyz) + fogDistanceVector.w;
		float t = dot(in_position, fogDepthVector.xyz) + fogDepthVector.w;

		if ( fogEyeT.y == 1.0 ) {
			if ( t < 0.0 ) {
				t = 1.0 / 32.0;
			} else {
				t = 31.0 / 32.0;
			}
		} else {
			if ( t < 1.0 ) {
				t = 1.0 / 32.0;
			} else {
				t = 1.0 / 32.0 + (30.0 / 32.0 * t) / ( t - fogEyeT.x );
			}
		}

		fog_tex_coord = vec2(s, t);
	#endif

	#ifdef USE_FOG_EXP
		#if defined(USE_VBO_MDV)
			ws_position = (u_ModelMatrix * vec4(in_position, 1.0)).xyz;
		#elif defined(USE_VBO_GHOUL2)
			ws_position = (u_ModelMatrix * vec4(position, 1.0)).xyz;
		#else
			// when model vbos are disabled, but the shader still requires
			// the modelmatrix to get world space positions.
			// store the modelmatrix in main uniform
			ws_position = (int(fogDistanceVector[3]) == 1)
				? (u_ModelMatrix * vec4(in_position, 1.0)).xyz
				: in_position;
		#endif
	#endif
}
